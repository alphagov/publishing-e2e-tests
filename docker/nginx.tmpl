{{/* This is a copy of the file from https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl */}}
{{/* It had to be duplicated so we could add customisations */}}
{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "upstream" }}
  {{ if .Address }}
    {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
    {{ if and .Container.Node.ID .Address.HostPort }}
      # {{ .Container.Node.Name }}/{{ .Container.Name }}
      server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
    {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
    {{ else if .Network }}
      # {{ .Container.Name }}
      server {{ .Network.IP }}:{{ .Address.Port }};
    {{ end }}
  {{ else if .Network }}
    # {{ .Container.Name }}
    server {{ .Network.IP }} down;
  {{ end }}
{{ end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}

# Pass through Govuk-Request-Id if we're given it otherwise use the
# nginx $request_id
map $http_govuk_request_id $proxy_govuk_request_id {
  default $http_govuk_request_id;
  ''      $request_id;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log off;

{{ if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{ else }}
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
proxy_set_header GOVUK-Request-Id $proxy_govuk_request_id;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
{{ end }}

server {
  server_name _; # This is just an invalid value which will never trigger on a real hostname.
  listen 80;
  access_log /var/log/nginx/access.log vhost;
  return 503;
}

{{ if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
server {
  server_name _; # This is just an invalid value which will never trigger on a real hostname.
  listen 443 ssl http2;
  access_log /var/log/nginx/access.log vhost;
  return 503;

  ssl_session_tickets off;
  ssl_certificate /etc/nginx/certs/default.crt;
  ssl_certificate_key /etc/nginx/certs/default.key;
}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
{{ $upstream_name := sha1 $host }}
# {{ $host }}
upstream {{ $upstream_name }} {
{{ range $container := $containers }}
  {{ $addrLen := len $container.Addresses }}

  {{ range $knownNetwork := $CurrentContainer.Networks }}
    {{ range $containerNetwork := $container.Networks }}
      {{ if eq $knownNetwork.Name $containerNetwork.Name }}
        ## Can be connect with "{{ $containerNetwork.Name }}" network

        {{/* If only 1 port exposed, use that */}}
        {{ if eq $addrLen 1 }}
          {{ $address := index $container.Addresses 0 }}
          {{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
        {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
        {{ else }}
          {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
          {{ $address := where $container.Addresses "Port" $port | first }}
          {{ template "upstream" (dict "Container" $container "Address" $address "Network" $containerNetwork) }}
        {{ end }}
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

{{/* Get the HTTPS_METHOD defined by containers w/ the same vhost, falling back to "redirect" */}}
{{ $https_method := or (first (groupByKeys $containers "Env.HTTPS_METHOD")) "redirect" }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := trimSuffix ".crt" $vhostCert }}
{{ $vhostCert := trimSuffix ".key" $vhostCert }}

{{/* Use the cert specified on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{ $is_https := (and (ne $https_method "nohttps") (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

{{ if $is_https }}

{{ if eq $https_method "redirect" }}
server {
  server_name {{ $host }};
  listen 80 {{ $default_server }};
  access_log /var/log/nginx/access.log vhost;
  return 301 https://$host$request_uri;
}
{{ end }}

server {
  server_name {{ $host }};
  listen 443 ssl http2 {{ $default_server }};
  access_log /var/log/nginx/access.log vhost;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

  ssl_prefer_server_ciphers on;
  ssl_session_timeout 5m;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
  ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

  {{ if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
  ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }};
  {{ end }}

  {{ if (ne $https_method "noredirect") }}
  add_header Strict-Transport-Security "max-age=31536000";
  {{ end }}

  {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
  include {{ printf "/etc/nginx/vhost.d/%s" $host }};
  {{ else if (exists "/etc/nginx/vhost.d/default") }}
  include /etc/nginx/vhost.d/default;
  {{ end }}

  location / {
    {{ if eq $proto "uwsgi" }}
    include uwsgi_params;
    uwsgi_pass {{ trim $proto }}://{{ trim $upstream_name }};
    {{ else }}
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
    {{ end }}
    {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
    auth_basic	"Restricted {{ $host }}";
    auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
    {{ end }}
    {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
    include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
    {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
    include /etc/nginx/vhost.d/default_location;
    {{ end }}
  }
}

{{ end }}

{{ if or (not $is_https) (eq $https_method "noredirect") }}

server {
  server_name {{ $host }};
  listen 80 {{ $default_server }};
  access_log /var/log/nginx/access.log vhost;

  {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
  include {{ printf "/etc/nginx/vhost.d/%s" $host }};
  {{ else if (exists "/etc/nginx/vhost.d/default") }}
  include /etc/nginx/vhost.d/default;
  {{ end }}

  location / {
    {{ if eq $proto "uwsgi" }}
    include uwsgi_params;
    uwsgi_pass {{ trim $proto }}://{{ trim $upstream_name }};
    {{ else }}
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
    {{ end }}
    {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
    auth_basic	"Restricted {{ $host }}";
    auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
    {{ end }}
    {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
    include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
    {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
    include /etc/nginx/vhost.d/default_location;
    {{ end }}
  }
}

{{ if (and (not $is_https) (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
server {
  server_name {{ $host }};
  listen 443 ssl http2 {{ $default_server }};
  access_log /var/log/nginx/access.log vhost;
  return 500;

  ssl_certificate /etc/nginx/certs/default.crt;
  ssl_certificate_key /etc/nginx/certs/default.key;
}
{{ end }}

{{ end }}
{{ end }}

{{/* End of copy from https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl */}}
{{/* Customisations for gov.uk are below this comment */}}

server {
  server_name assets-origin.dev.gov.uk;
  listen 80;
  access_log /var/log/nginx/access.log vhost;

  {{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
  {{ $upstream_name := sha1 $host }}
  {{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

  {{ if eq $host "calendars.dev.gov.uk" }}
  location /calendars/ {
    proxy_set_header Host calendars.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "collections.dev.gov.uk" }}
  location /collections/ {
    proxy_set_header Host collections.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "finder-frontend.dev.gov.uk" }}
  location /finder-frontend/ {
    proxy_set_header Host finder-frontend.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "frontend.dev.gov.uk" }}
  location /frontend/ {
    proxy_set_header Host frontend.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "government-frontend.dev.gov.uk" }}
  location /government-frontend/ {
    proxy_set_header Host government-frontend.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "manuals-frontend.dev.gov.uk" }}
  location /manuals-frontend/ {
    proxy_set_header Host manuals-frontend.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "specialist-frontend.dev.gov.uk" }}
  location /specialist-frontend/ {
    proxy_set_header Host specialist-frontend.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "static.dev.gov.uk" }}
  location / {
    proxy_set_header Host static.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "whitehall-frontend.dev.gov.uk" }}
  location /government/assets/ {
    proxy_set_header Host whitehall-frontend.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "draft-whitehall-frontend.dev.gov.uk" }}
  location /government/assets/ {
    proxy_set_header Host draft-whitehall-frontend.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ if eq $host "asset-manager.dev.gov.uk" }}
  # Ref: https://github.com/alphagov/govuk-puppet/blob/3001e50c2c44c5456e316ae5bd0d241eade063b8/modules/govuk/templates/static_extra_nginx_config.conf.erb#L19-L37
  location ~ ^/media/ {
    proxy_set_header Host asset-manager.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  # Ref: https://github.com/alphagov/govuk-puppet/blob/3001e50c2c44c5456e316ae5bd0d241eade063b8/modules/govuk/manifests/apps/asset_manager.pp#L131-L199
  location ~ /cloud-storage-proxy/(.*) {
    internal;
    set $download_url $1$is_args$args;
    proxy_pass $download_url;
  }
  # The cloud-storage-proxy location block (above) sets the Host header to
  # assets-origin.dev.gov.uk when proxying to http://127.0.0.1/fake-s3/...,
  # so we need this location block to proxy that URL to the Asset Manager Rails
  # app, i.e. the upstream server.
  location ~ /fake-s3/(.*) {
    proxy_set_header Host asset-manager.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }

  # Ref: https://github.com/alphagov/govuk-puppet/blob/2535ae6fe00ad8d91ee0fc32b7c6e9bd8e86b911/modules/govuk/templates/static_extra_nginx_config.conf.erb#L30
  location /government/uploads/system/uploads/image_data/file/ {
    proxy_set_header Host asset-manager.dev.gov.uk;
    proxy_pass {{ trim $proto }}://{{ trim $upstream_name }};
  }
  {{ end }}

  {{ end }}

  add_header "Access-Control-Allow-Origin" "*";
  add_header "Access-Control-Allow-Methods" "GET, OPTIONS";
  add_header "Access-Control-Allow-Headers" "origin, authorization";
}
